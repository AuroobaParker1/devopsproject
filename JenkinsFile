pipeline {
    environment {
        dockerimagebe = 'nawalirfan/thriftstore-be'
        dockerImageBackend = ""
        dockerimagefe = 'nawalirfan/thriftstore-fe'
        dockerImageFrontend = ""
        registryCredential = '1cdec1d8-91fd-4419-8624-1c430755e65a'
        kubeconfigSecret = '00256892-d25f-4348-8fdb-4d65fdd39d8b'
        kubeconfigPath = 'C:/Users/irfan.kube/config'    
    }
    agent any
    
    stages {  
        stage('Unit Tests Backend') {
            steps {
                echo 'Testing backend...'
                dir('./Thrift_Store') {
                    bat 'npm install'
                    bat 'npm test'
                }
            }
        } 
        stage('Unit Tests Frontend') {
            steps {
                echo 'Testing frontend...'   
                // dir('./react-tutorial') {
                //     bat 'npm install'
                //     bat 'npm test'
                // }         
            }
        }  
        stage('Build Docker Images') {
            steps {
                echo 'Building Docker Image...'                
                script {
                    dockerImageBackend = docker.build("${dockerimagebe}","./Thrift_Store")
                    dockerImageFrontend = docker.build("${dockerimagefe}","./react-tutorial")
                }                          
            }
        }
        stage('Push Docker Images') {            
            steps {
                echo 'Pushing Docker Image...' 
                withCredentials([usernamePassword(credentialsId: 'dockercreds', passwordVariable: 'DOCKERHUB_PASSWORD', usernameVariable: 'DOCKERHUB_USERNAME')]) {
                    bat "docker login -u %DOCKERHUB_USERNAME% -p %DOCKERHUB_PASSWORD%"
                }               
                script {
                    docker.withRegistry( '', registryCredential) {
                        dockerImageBackend.push("latest")
                        dockerImageFrontend.push("latest")
                    }
                }                          
            }
        }
        stage('minikube config') {
            steps {
                echo 'Starting minikube...'                
                bat "docker context use default"
                bat 'minikube config set driver docker'                
                bat 'minikube start'
                powershell 'minikube docker-env | Invoke-Expression'
                bat 'minikube status'
                bat 'minikube ip'   
                bat 'kubectl config use-context minikube'                                                                             
            }
        }
        stage('deploy on Kubernetes') {
            steps {
                echo 'Deploying on kubernetes'
                script {
                    withCredentials([file(credentialsId: "${kubeconfigSecret}", variable: 'KUBECONFIG')]) {
                        bat "kubectl --kubeconfig ${kubeconfigPath} apply -f ./Kubernetes/mongo-deployment.yaml --validate=false"
                        bat "kubectl --kubeconfig ${kubeconfigPath} apply -f ./Kubernetes/backend-deployment.yaml --validate=false"
                        bat "kubectl --kubeconfig ${kubeconfigPath} apply -f ./Kubernetes/frontend-deployment.yaml --validate=false"
                    }
                }
            }
        } 
        // stage('Port forwarding...') {
        //     steps{
        //         echo 'port forwarding task being done'
        //         echo 'frontend will be running on port 3000!'
        //         bat 'kubectl port-forward service/backend 5000:5000'
        //     }
        // }
        stage('Integration Tests') {
            steps {
                bat """
                    curl -X GET http://localhost:5000/api/status | findstr /i "\"status\": true"

                    if %errorlevel% neq 0 (
                        echo "Integration test failed! Backend status might be false."
                        exit /b 1
                    )

                    echo "Integration test passed! Backend seems healthy."
                """
            }
        }
      
    }
    post {
        success {
            echo 'Build successful!'
        }        
        failure {
            echo 'Build failed!'
        }
    }
}
