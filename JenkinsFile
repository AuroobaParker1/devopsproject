pipeline {
    environment {
        dockerimagebe = 'auroobaparker/backend-image'
        dockerImageBackend = ""
        dockerimagefe = 'auroobaparker/frontend-image'
        dockerImageFrontend = ""
        registryCredential = '75414fc1-41f1-4690-a367-63bcadaa39a0'
        kubeconfigSecret = 'cubesecret'
        kubeconfigPath = 'C:/Users/AuroobaParker/.kube/config'    
        registryCredentials = 'dockercreds'    
    }
    agent any
    
    stages {  
        stage('Unit Tests Backend') {
            steps {
                echo 'Testing backend...'
                dir('./Thrift_Store') {
                    bat 'npm install'
                    bat 'npm test'
                }
            }
        } 
        stage('Unit Tests Frontend') {
            steps {
                echo 'Testing frontend...'            
            }
        }  
        stage('Build Docker Images') {
            steps {
                echo 'Building Docker Image...'                
                script {
                    dockerImageBackend = docker.build("${dockerimagebe}","./Thrift_Store")
                    dockerImageFrontend = docker.build("${dockerimagefe}","./react-tutorial")
                }                          
            }
        }
        stage('Push Docker Images') {            
            steps {
                echo 'Pushing Docker Image...'              
                script {
                    docker.withRegistry( '', registryCredentials) {
                        dockerImageBackend.push("latest")
                        dockerImageFrontend.push("latest")
                    }
                }                          
            }
        }
        stage('minikube config') {
            steps {
                echo 'Starting minikube...'  
                bat 'minikube delete'              
                bat "docker context use default"
                bat 'minikube config set driver docker'                
                bat 'minikube start --driver docker'
                powershell 'minikube docker-env | Invoke-Expression'
                bat 'minikube status'
                bat 'minikube ip'   
                bat 'kubectl config use-context minikube'                                                                             
            }
        }
        stage('deploy on Kubernetes') {
            steps {
                echo 'Deploying on kubernetes'
                bat "kubectl apply -f ./Kubernetes/mongo-deployment.yaml --validate=false"
                bat "kubectl apply -f ./Kubernetes/backend-deployment.yaml --validate=false"
                bat "kubectl apply -f ./Kubernetes/frontend-deployment.yaml --validate=false"
                }
        } 
        stage('Port forwarding...') {
            steps{
                echo 'port forwarding task being done'
                echo 'frontend will be running on port 3000!'
                bat 'start cmd /c kubectl port-forward service/frontend 3000:3000'  
            }
        }
      
    }
    post {
        success {
            echo 'Build successful!'
        }        
        failure {
            echo 'Build failed!'
        }
    }
}
